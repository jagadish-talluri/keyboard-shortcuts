VIM => Shortcuts:
----------------
Readers are Leaders; Vimmers are Winners. - Jagadish Talluri

1. Has 2 modes 
	a) NORMAL(to navigate, use ESC key) 
	b) INSERT (to edit, use I key)
2. Home Row Keys(h,j,k,l) For Navigation 
	[ Left(H) - Right(L) ]
	[ Down(J) - Up(K) ]
3. Navigation Movements, CAPS for BLANKS, word=group-of-character-including-underscore, word may be surrounded by other characters
	a) W moves to the start of next word(after a BLANK)
	b) B moves to the begining of previous word
	c) E moves to the end of current/next word(before a BLANK)
	d) ge moves to the end of previous word
	e) w moves to the start of next word
	f) e moves to the end of current/next word
	h) w <> b ; e <> ge ; opposites
4. Navigation Movements With Numbers
	a) 3W is same as pressing W three times.
	b) 5E is same as pressing E five times.
	c) 7K is same as pressing K seven times.
	d) 9L is same as pressing L nine times.
5. Insert Repeated Literals
	a) 30ohi-ESC is same as typing "hi" thirty times in INSERT mode on every line.
	g) 4igo-ESC is same as typing "go" four times in INSERT mode.
6. FIND Next Occurence Of A CHARACTER (in same line + case sensitive)
	a) fO finds next O
	b) FO finds previous O
	c) 3fO finds next third O
	d) t., goes to just before .
	e) t!, goes to just before !
	f) T", goes to just after "
	g) ;, consecutive next occurrence
	h) , consecutive previous occurence
	i) T and F, for backward
	j) T encloses like quotes
	k) d2t., deletes the line till before second dot character
	l) tr, goes to just before r (unTil r)
7. % to find matching bracket round, flower, square.
8. To Reach The Ends Of A Line
	a) 0 pressing zero is same as pressing HOME, hard BOL
	b) $ pressing dollor is same as pressing END, hard EOL
	c) ^ pressing cap/caret goes to first-non-blank character(till indentation), soft BOL
	d) g_ goes to last-non-blank character, soft EOL
9. Find The Next Occurrence Of Word Under CURSOR
	a) * to find next
	b) # to find previous
	c) n or N, use for next words (i fig out its a search s/c)
10. File Ends
	a) gg for moving to the BEGIN of the file(like cntl+home)
	b) G for moving to the END of the file(like cntl+end)
	c) 10G for moving the CURSOR to the BEGIN of tenth line
	d) :4 for moving the CURSOR to fourth line
11. To Search USE / Or ?
	a) /text + ENTER, searches for text keyword, n -> next occurrence; N -> previous occurrence
	b) ?text + ENTER, reverse searches for text keyword, n -> previous occurrence; N -> next occurrence 
	c) :g//, to print the list-of-matches in search
	d) :g//#, to print the list-of-matches in search with line numbers
	e) :nohl, to clear the highlights when you are done
	f) :hlsearch, to highlight search results
	g) :incsearch, to highlight dynamic search results(like google)
12. To INSERT NEW LINE
	a) o inserts a line below the current line + takes you to INSERT mode.
	b) O inserts a line above the current line + takes you to INSERT mode.
13. To DELETE A Character
	a) X deletes the current character and moves left, if it is END of the word(like BACKSPACE)
	b) x deletes the current character and moves right, if it is BEGIN of the word(like DELETE)
14. To REPLACE Character Under CURSOR -> r for REPLACE and c for CHANGE
	a) r then type the new character, done without INSERT mode
	b) ce, to replace till the end of word, *play with BACKSPACE and see the awesomeness*
	c) c$, to replace till the end of line
	d) R, to replace continously, REPLACE MODE, *play with BACKSPACE and see the awesomeness*not in 7.3
	e) c/here, changes till the word 'here', using search as a motion
15. To DELETE/CUT, first D then other COMBI WORD
	a) D to DELETE
	b) DW to DELETE previous word
	c) D2E to DELETE next two words
	d) DD to DELETE entire line
	e) P to PASTE the deleted one, before cursor
	f) D$ to DELETE the rest of the line
	g) D0 to DELETE the till the begin of the line
	h) D[n][movement/navigation] to DELETE as per the w,e,b,h,j,k,l
	i) yy, to copy current line or 0y$
	j) p, paste after cursor
	k) dap, delete a paragraphs(paragraph is a text object)
	l) das, delete a sentence
	m) d%, delete in the bracket,if cursor is on the brace
	n) d(, delete from here till begining of sentence
	o) d), delete from here till ending of sentence
	p) d{, delete from here till begining of paragraph
	q) d}, delete from here till ending of paragraph
16. To REPEAT a command use DOT .
	a) d2w to delete two words, then .(DOT) to REPEAT it.
	b) 3., repeats the last command 3 times 
	c) N<command>, 2dd or 4ihello
	d) . can remember <insert>do-some-stuff<exit> (r,R,c,a,A,s,i are ways to insert)
	e) @:, repeats the last command used in COMMAND-LINE-MODE a.k.a ":do-some-stuff-mode"
17. To SELECT text in VISUAL mode
	a) v to enter into VISUAL mode
	b) select text by using the movement/navigation keys
	c) :'<,'>w filename, save selected text into new file (you dont need to type angular brackets)
	d) y2/foo, yank upto second occurrence of foo. (yank or delete or visual can be used)
	e) v15j, select 15 lines down
	f) gv, to reselect the same selection (if we missed or lost or to redo)
	g) V, to select line wise
	h) cntl+v, to select block wise
18. MISTAKES
	a) u, for UNDO
	b) cntl+r, for REDO
19. AUTO COMPLETION
	a) cntl+n, next word
	b) cntl+p, previous word
20. EXIT commands
	a) :w, to save
	b) :q, to quit
	c) :q!, to quit without saving
	d) :wq, to save and quit, ZZ or :x does the same
	e) :w filename, to saveas into filename
	f) :qa!, close all without saving
21. SPLIT windows
	a) :split or :sp or "cntl+w then s" -> for horizontal split
	b) :vsplit or :vsp or "cntl+w then v" -> for vertical split
	c) cntl+ww to switch between splits
	d) cntl+w + j, switch to down split (other directions also valid)
	e) :q, quit the window
	f) :on or :only, quit all other windows
	g) :close or cntl+w THEN c, to close the window
	h) cntl+w THEN o,  to close all windows except the one you are in
22. APPEND, a A, similar to i, but directly takes you to the POSITION
	a) a, append NEXT TO CURSOR
	b) A, append at the END OF LINE
	c) i, append BEFORE the CURSOR
	d) I, append at the BEGIN OF LINE
23. TRACK your cursor movement (if you feel lost)
	a) cntl+i, takes you to forward cursor position
	b) cntl+o, takes you to previous cursor position
	c) cntl+g, shows current postion of cursor
24. EXECUTE external command
	a) :!, then type the command
	b) :!ls, prints ls output
25. SUBSTITUE a pattern (similar to FIND REPLACE)
	a) :s/find/replace,	replaces one occurrence
	b) :s/find/replace/g, replaces all occurrences in a line
	c) :s/find/replace/gc, replaces all occurrences in a file with confirmation
	d) :#,#s/find/replace/gc, replaces in #,# range of numbered lines with confirmation
	e) :%s/find/replace/gc, replaces entire file with confirmation
	f) &, to repeat the substitution/replace-next (like 'n' in search/find-next)
26. EXTERNAL output, RETRIEVE or READ command, AWESOME command
	a) :r filename, prints that filename output below the cursor
	b) :r! ls, prints the commands output below the cursor
	c) :$r filename, prints that filename output at the end of file
	d) :0r filename, prints that filename output at the start of file
	e) :/pattern/r filename, prints that filename output next to the pattern match in the file
27. COPY, here its YANK
	a) y, to copy
	b) yw, copy one word
	c) y$, copy till end, all movements possible
	d) use visual mode to select and copy
28. SET OPTIONS, Typing ":set xxx" sets the option "xxx".  Some options are:
        'ic' 'ignorecase'       ignore upper/lower case when searching
        'is' 'incsearch'        show partial matches for a search phrase
        'hls' 'hlsearch'        highlight all matching phrases
     You can either use the long or the short option name.
	 :set noic, to unset
29. HELP
	a) F1
	b) :help
	c) :help w
	d) :help user-manual
	e) :e, then press cntl+d for option, use <TAB> also
	f) :help usr_02.txt, all good commands
	g) cntl+], to follow links/tags, search through tags
	h) cntl+o, to jump back
	i) :helpgrep, to search in help
	j) :cwindow, to put the results in a new window
	k) cntl+n/cntl+p, for next/previous in help
	l) :h motion.txt
30. SPLIT SIZE, RESIZE
	a) http://vimcasts.org/episodes/working-with-windows/
	b) "cntl+w" then ">", to make window wider
	c) "cntl+w" then "<", to make window narrower
	d) "30cntl+w" then ">", to make 30 character extra wider
	e) "15cntl+w" then "<", to make 15 character extra narrower
	f) "cntl+w" then "=", to make windows equal size
	g) http://stackoverflow.com/questions/4368690/how-to-increase-the-vertical-split-window-size-in-vim
	h) "cntl+w" then "|", to maximize the width of current window
	i) "cntl+w" then "_", to maximize the height of current window
	j) "cntl+w" then "r", to rotate the windows
	j) "cntl+w" then "R", to rotate back the windows
	k) "cntl+w" then "x", to exchange the current window with next one(swap windows)
	l) :help cntl+w, to know all about the shortcuts about split windows
31. INDENTS
	a) >>, to indent
	b) <<, to remove indent
	c) >>.., to indent 3 times
	d) 4>>.., to indent 4 lines 3 times
	e) cntl+t, to indent in insert-mode
	f) cntl+d, to unindent in insert-mode
	g) select + >, to indent in visual-mode/motions/text-objects
	h) select + <, to unindent in visual-mode/motions/text-objects
	i) :set shiftwidth=4, indent width when used tab, 4 is good for many programs, default is 8
32. SELECT within SOMETHING, Suppose the cursor is on the first o of (map (+) ("foo")).
	a) vi" → will select foo.
	b) va" → will select "foo".
	c) vi) → will select "foo".
	d) va) → will select ("foo").
	e) v2i) → will select map (+) ("foo")
	f) v2a) → will select (map (+) ("foo"))
	g) <action>a<object>, all with LIMIT/brace
	h) <action>i<object>, all without LIMIT/brace
	i) viw → will select a word.
	j) v2iw → will select 2 words.
	k) vis → will select a sentence.
	l) use them with d (delete) or y (yank) also
33. COMMENT or PRE-FIX
	1) cntl+v, to start select (visual select)
	2) G, to go till end
	3) I, caps i to insert
	4) --, comment or anything to prefix
	5) <ESP>, press escape
34. SUFFIX
	1) cntl+v, to start select (visual select)
	2) j, use it to select down
	3) $, to move to end
	4) A, caps a, to insert at end
	5) ##, type anything
	6) <ESP>, press escape
35. DISABLE arrow keys
	a) add the below commands in .vimrc file, if its not there create it in home dir
		nnoremap <up> <nop>
		nnoremap <down> <nop>
		nnoremap <left> <nop>
		nnoremap <right> <nop>
	b) add the below commands in .vimrc file, for any text feedback
		nnoremap <up> :echo "No More Arrow Keys" <CR>
36. LINE NUMBERS
	1) In Normal Mode
	2) type ':set number' or ':set nu', this will enable line numbers.
	3) type ':set nonumber' or ':set nonu', this will disble line numbers.
	4) type ':set nu!', this will toggle line numbers(show/hide).
	5) type ':set relativenumber' or ':set rnu', this will enable relative line numbers.(from V.7.3)
37. VISIBLE TABs
	1) :set list
	2) :set listchars=tab:>-
	3) to insert unicode, 'cntl+v' then 'u' then code like '00b7'
	4) :set listchars=tab:»·
	5) these are unicodes, speacial characters, » is double-arrow '00bb',· is middle-dot '00b7'
	6) using unicodes helps us not to mix the code and letters, less confusion
38. VERSION, :version
39. SCROLL
	a) zt, move current line to the top
	b) zz, move the current line to the middle
	c) zb, move the current line to the bottom
	d) cntl+e, scroll down
	f) cntl+y, scroll up
	g) Lzz, goto bottom of the page	 then put the line in center
40. NAVIGATION
	a) cntl+b -> full page up
	b) cntl+f -> full page down
	c) cntl+u -> half page up
	d) cntl+d -> half page down
	e) H -> highest part in the current page view
	f) M -> middle part in the current page view
	g) L -> lowest part in the current page view
	h) 5cntl+f -> move 5 page downs
	i) 10%, goto 10% of the file
	j) :10, goto tenth line
	k) 10|, goto tenth column
	l) gj or gk to move cursor up/down on wrapped line text
	m) 'g;' or 'g,' to move cursor in the last edit locations(recent changelist) back or forth
	n) cntl+o, jump backward
	o) cntl+i, jump forward
	p) :jumps, get a list of jumps
	q) ( or ), jump to next/prev sentence
	r) { or }, jump to next/prev paragraph
	s) gf, jump to file name under the cursor
	t) :changes, get a list of all changes
	u) g; and g,  ;; traverse forward and backward through changes
41. OPEN command history buffer
	a) ':help c' then cntl+f
	b) q:, this can also open the command history
42. COLORSCHEME
	a) :colo <space> cntl+d
	b) :colo then tab
	c) :colo mrphy, a good one
	d) :colo default, a default colorscheme
43. CASE
	a) select the text then U, to upper case
	b) select the text then u, to lower case
	c) gU, turns uppercase also works
	d) gu, turns lowercase also works
	e) ~, tilde is used to toggle one character's case
	f) gUU, turns entire line into uppercase
	g) guu, turns entire line into lowercase
44. SUBSTITUE key s
	a) s, deletes the character under cursor + enters into insert mode
	b) 4s, deletes the characters under cursor till 4 next + enters into insert mode
	c) S, substitue a LINE
45. MARKS or BOOK-MARKS
	a) ma, to mark a line with letter "a"
	b) mb, to mark a line with letter "b"
	c) 'a, to go to the begin of marked line with "a"
	d) `a, to go to the cursor position of marked line with "a"
	e) :marks, lists the marks on the file
	f) :marks c, shows the mark named "c"
	g) marks available from a-z (lower case) in same file (local)
	h) marks available from A-Z (upper case) in all files (global)
	i) d'a, delete till mark-a, we can mix with motions
	j) y'a, copy till mark-a
	k) `', last cursor jump
	l) `., last change
	m) `^, last insert
	n) `[, start of last change or yank
	o) `], end of last change or yank
	p) `<, start of last visual select
	p) `>, end of last visual select
46. DOT FILES, configuration files, .vimrc, get from friends and play
	a) have plugin info, plugin manager info
	b) start up scripts, keyboard hotkey mappings
	c) https://github.com/mscoutermarsh/dotfiles
	d) https://github.com/thoughtbot/dotfiles
47. PLUGINS names, can be useful for many reasons
	a) cntlp, for fuzzy search, %hello%
	b) nerdTree, for file tree toolbar on left
	c) AG for VIM, good file seach in VIM
	d) supertab, must app, tab will do the completion
	e) syntastic, runtime compile checks like eclipse
48. MULTI-FILES
	a) $ vi file1.txt file2.txt file3.txt
	b) :ls, show how many files opened in vi
	c) :e file2.txt, opens file2.txt in the current window
	d) :sp file1.txt, opens and new window with the mentioned file
49. COMMAND-LINE-MODE, extra commands
	a) :scriptnames, to list the loaded startup files for vim
	b) :version, to show the version details
	c) :help ft-<cntl-d>, lists available syntax_files
50. PACKAGE MANAGER, for vim plugins
	a) vundle(r), one place for all vim plugins
	b) 
51. BUFFERS, they are just views
	a) :ls, to show the list of buffers (open files in VIM)
	b) :bn or :bnext, move to next buffer
	c) :bp or :bprevious or :bprev, move to previous buffer
	d) :e filename, open new file in this buffer
	e) :bd or :bdelete, delete the current buffer
	f) %, the current buffer
	g) #, the alternate buffer
	h) cntl+^, toggle between current and alternate buffers
	i) :bfirst or :bf, switch to first buffer
	j) :blast or :bl, switch to last buffer
	k) :bN, example :b2 to switch to 2nd buffer, :b8 to switch to 8th buffer, numbered buffer
	l) :bufdo, excecute and ex command on all buffers, example -> :bufdo q, to quit all buffers
	m) :5,10bd, to delete buffers from 5 to 10
	n) +, from the buffer list we can tell if a buffer is modified with this plus symbol
52. REGISTERS, they are just handy clipboards
	a) :reg, to show the list of registers
	b) "ayy, copy the current line and put in register "a"
	c) "Ayy, to append to the register "a", we need to use caps-a "A"
	d) "ap, to paste from register "a"
	e) a-z, we can use a to z registers, total 26 + numbers too
	f) cntl+r then a, to paste 'a' content in insert-mode, VVIMP, any register is usable
	f) cntl+r 0, to paste '0' content in insert-mode, VVIMP, any register is usable
	g) :let @a='4dd', to edit a register named 'a' in command line
	h) "%, this register has current-file-name
	i) :h registers
53. MACROS, memorizing keystrokes
	a) qa, to start a recording named 'a'
	b) dd, type what ever you want, it will be recorded
	c) q, to stop recording the macro
	d) @a, to run/play the macro
	e) "qp, to paste the content in macro just recorded, yes "q is a register which has it
	f) can edit and put it back in that register again
	g) :normal @q, apply macro q on visual selection
	h) @@, to repeat last executed macro, similar to dot in macro world
54. TABS, for layouts, for differnt workspaces
	a) :tabe new-file, open new-file in a new tab
	b) :tabnew, opens new tab
	c) gt or :tabn, moves to next tab
	d) gT or :tabp, moves to previous tab
	e) 4gt, moves to 4th tab
	f) :tab ball         show each buffer in a tab (up to 'tabpagemax' tabs)
	g) :tab help         open a new help window in its own tab page
	h) :tab drop {file}  open {file} in a new tab, or jump to a window/tab containing the file if there is one
	i) :tab split        copy the current window to a new tab of its own
	j) http://vim.wikia.com/wiki/Using_tab_pages
	k) :windo lcd {path}, to scope a tab to a directory
	l) cntl+w then T, to move the current window into new tab page
	m) :tabc, close tab
	n) :tabo, close all tabs but the one under use
	o) :tabmove N, move/change position the tab N places
55. FILTER, ! char is special meaning char
	a) be in line 1, then '!10G', goes to 10th line with anticipation, 'sort' it sorts the selected text
	b) !, we can use this to perform outside programs in side, select text is input to outside program
	c) output from outside program replaces the selected text
	d) !!, for commands doesn't read standard input
	e) '!!ls' prints ls content in the editor
	f) '!!date' prints date in the editor, useful for loggin
	g) always replaces the current selected text
	h) !, means force
56. MNEMONICS
	a) ), next sentence
	b) (, previous sentence
	c) }, next paragraph
	d) {, previous paragraph
	e) aw, a word
	f) as, a sentence
	g) ap, a paragraph
	h) ci', change inner quotes or find next set of inner quotes and change inside it
57. ARG LIST
	a) :arg, to show the files in your current arglist
	b) :argdo, to run a command on your arglist
	c) :argadd or :arga, to add files to your arglist
	d) :argdelete or :argd, to remove files from your arglist
	e) :argdo update, to save all changes to your arglist
	f) :argdo undo, to undo changes to your arglist
	g) :argdo %s/sam/bob/g, to replace in all the files in arg
	h) :arga names.rb, to add names.rb file to the arglist
	i) :argd *, to clear the arglist
	j) :next or :prev, traverse files in the argument list
58. ABBREVIATE
	a) :abbreviate jt Jagadish Talluri
	b) when typing use jt<space>, it automatically places the desired text
	c) :abbreviate ctinx CREATE TABLE IF NOT EXISTS, will be very useful
	d) :abbreviate, shows the list of abbreviation available
	e) :abbreviate rjt Regards,<newline>Jagadish Talluri, will be useful signature
	f) :ab, is short form of abbreviate
59. MAP
	a) :map <F5> i{<Esc>ea}<Esc>, this will surround a word with curly brace when you press F5
	b) :map, list down all the mappings available
60. COMMAND-LINE-MODE OPTIONS CHECK
	a) :set ignorecase, sets the option
	b) :set ignorecase?, prints the option which was already set
	c) :set ignorecase!, flips the option, reverse (! negates current value)
	d) :set ignorecase&, set the option to default value
	e) :set backspace?, show what it is set to
	f) Q, enter into ex-mode or pure command line mode fully(cntlp & cntln wont work here)
	g) :visual, to exit from ex-mode
	h) :set all&, set all options to default
	i) :set all, to sell all option values
	j) :set ignorecase list number shiftwidth=4, we can set multiple values in one line ** very useful
61. MAKE VIMRC magically
	a) :mkvimrc new-file, create as new-file with all the settings in the session
	b) :source new-file, will update the session with new settings
	c) :version, shows the vimrc files used in the session in the middle of the junk
	d) .exrc file is related to vi not vim, if you want to use full power of vim always use .vimrc file
62. MODELINES, due to somereason not working
	a) use to set vim configuration for particular file
	b) vim:tw=78:ts=8:sw:8:rnu, makes vim read these lines as special line in the code only for settings
	c) used to keep the particular file always open in those settings as per the author formatting, ex: help files
	d) :set modeline or nomodeline, activaes / deactivates this option
	e) you can customize vim settings for few files/directories/etc also
63. AWESOME - COMMAND OPTIONS
	a) :set timeoutlen, defalut to 1000(one sec) but change to 100, you see super response times
	b) :set cmdheight=4, sets command mode height to 4 lines, default is 1 line height
	c) :set showcmd, shows the command you are using at the last line (default is on)
	d) :set showmode, shows the curren mode (visual/insert) , (default is on) dont turn off its difficult to notice
	e) !!sh, to execute a line on vim as a shell command and place the output in vim buffer itself, good for presentation
	f) !!bash, same as above with bash shell
	g) !!$SHELL, same as above with current active environment shell
	g) yyp!!sh, is a good way to have a copy of command and print/execute it
	h) :map <F5> yyp!!sh<CR>, you can map it to F5 key for better speed		**this is awesome
	i) :read !echo hello, print the hello in vim buffer
	j) yy:@"<cr>, execute the current line (vim command) which is written on the buffer literally
	k) :normal d4j, is a normal command to delete 4 following lines; :map <space>l yy:@"<cr>, so the written command executes when space+l is pressed
64. OPEN FILE at a specific line
	a) vi +5 some-file, opens some-file and places cursor at line 5
	a) vi +0 some-file, opens some-file and places cursor at line 0
	a) vi +$ some-file, opens some-file and places cursor at last line
	a) vi +/xyz some-file, opens some-file and places cursor at pattern match line
	
NOTE: There are 
		  NO Icons
		, NO Menus
		, NO Mouse Clicks
		, NO Tabs
		, NO Close Button
		, Not Just shift+cntl+alt+tab hot keys, everykey is a hot key, cryptic
		, NO familiar shortcuts, cntl+c!=copy, cntl+x!=cut, cntl+z!=undo
		, NO GUI, NO Pointers
		, NO ToolTips, NO Guides
		, NO Drag N Drop
		, NO Trackpad Gestures
	Other editors have shortcuts to do things. Here we have to do everything with shortcuts only.
	VIM is more of a language for editing.
	
TIPS MANIA:
-----------
1. TO DO LIST, mark done
	1) write your list
	2) goto "insert mode" then type "done" or any other word then "escape"
	3) goto new item then "." (yes dot to repeat the typing)
	4) we can use tick-mark or check-mark (using unicode U+2713) [✓]
2. TO SCREEN CAST
	a) use SCREENKEY, a tool which shows what key you pressed
	b) https://github.com/wavexx/screenkey
	c) KEYCAST, for mac
3. Use VIM to explain instead on NOTEPAD.
4. TERMINOLOGY
	a) Splits are Windows
	b) Buffers are Tabs
	c) Tabs are Layouts
	d) Windows are used to see buffers (file loaded in memory)
	e) Tabs are used to arrange the Windows (for differnt views/projects)
	f) buffers are mapped to files
	g) Tab is not meant for a single file
5. UNDERLINE
	1) goto the heading
	2) yyp, copy current line and duplicate it
	3) V, visual select the line
	4) r=, replace line wiht "=" characters
	5) in short you can write yypVr=
6. REPEATITION, delete spaces before the lines
	1) copy and paste mobaxterm content
	2) qa, to start recording a macro with "a"
	3) 0, to go to front
	4) dw, delete till first word
	5) j, go to next line
	6) q, to stop recording
	7) @a, to execute the recorded macro
	8) 10@a, to execute the recorded macro 10 times for 10 lines
7. MISC
	a) ggVG, to select an entire file
	b) J, join lines
	c) cntl+a/cntl+x, increments/decrements a value 
	d) cntl+r =5*5, puts 25 in insert mode, use as mini calculator
8. PASTE
	a) when you delete/copy entire line, you can keep the cursor any where in the line to paste it. it just works.
	b) you dont need to go to the first char and do "P"
	c) 2p can paste twice
9. BLACK HOLE REGISTER
	a) "_ (it is underscor)
	b) what ever goes to this register its gone
	c) use it when you dont want your delete to disturb the existing registers
10. inside INSERT MODE
	a) cntl+w, delete a word backwards in insert mode
	b) cntl+u, delete from cursor to begining of line
	c) cntl+o, run a normal command and come back to insert mode in one shot
	d) cntl+r THEN 0, to paste copied text in insert mode, 0 is yank register 
	e) cntl+r THEN =, to calculate on the fly inside insert mode (cntl+p has earlier calculations)
	f) cntl+v THEN 065, to insert A in insert mode (insert a char using character code)
11. CASE, select then
	a) gU, make upper case
	b) gu, make lower case
	c) ~, toggle word or letter or selection (moves cursor to next letter after toggles)
	d) g~, also does the same but why 'g' prefix
12. MISC
	a) cntl + a, increments a number
	b) cntl + x, decrements a number
	c) S or cc, to delete a line and replace with new text
13. GRAMMER -> ACTION-COUNT-MOTION/MNEMONICS
	a) daw, delete a word -> also use dw
	b) d2w, delete 2 words
	c) d9w, delete 9 words
14. MNEMONICS
	a) daw, delete a word
	b) das, delete a sentence
	c) dap, delete a paragraph
15. UN-Categorize
	a) vim -u NONE -N, start up vim without any vimrc but still nocompatible
	b) vit, target contents of a tag
	c) ]c[c, vimdiff jump to prev next change
	d) ]c do, vimdiff obtain from other window
	e) ]c dp, vimdiff paste to other window
	f) :diffup, vimdiff update colors
	g) cntl+r THEN cntl+P THEN register_name, to paste in insert-mode, but why cntl+p needed?
	h) ga, find the numeric value for the char under the cursor(ascii, hex, octal)
	i) cntl+k THEN char1 THEN char2, insert a diagraph
	j) :diagraphs, to list the diagraphs available in the system
	k) cntl+p, up/previous in command mode to browse the earlier command
	l) cntl+n, down/next in command mode to browse the next command
	m) gR, takes you to virtual replace mode, what is it?
	n) gv, reselect the last visual selection
	o) o, after visual selection, how to move to other end? ***
	p) :$, jump to end of file, command line way
	q) :6t., copies line 6 to just below current line ***
	r) :t6, copy the current line to just below line 6
	s) :t., duplicate the current line in command mode
	t) :t$, copy current line to the end of the file
	u) :'<,'>t0, copy visual select lines to start of the file(t -> copy)
	v) :'<,'>m0, move visual select lines to start of the file(m -> move)
	w) @:, repeat the last ex command
	x) @@, repeat the earlier macro many again
	y) :'<,'>normal P, to apply a normal command to a visual selection ***
	z) cntl+d, tabl completion in command mode ***
16. UN-Known
	a) :cntl+r AND cntl+w, to copy the word under the cursor to the command mode
	b) :cntl+r AND cntl+a, to copy the WORD under the cursor to the command mode
	c) q:, opens a window containg the commands history from normal mode
	d) cntl+f, opens a window of history commands from command mode
	e) q/, opens a window of search patters used till now
	f) %, short hand name for file name in command line mode
	g) :read!ls, paste the output of a command in the buffer (use any command)
	h) cntl+v, in command mode allows vim to capture the key's code instead of executing it, <Esc> as ^[
17. Findings by doing
	a) Underscore is not speacial character. VIM considers it like normal letter. w or W works same.
	b) x or delete-key deletes in forward direction. But if the line is ended then it deletes backward. careful.
	c) when you copy entire line with Y or yy. Pasting it actually pastes in new line. imp. not appends.
	d) cntl+o in insert mode, put the insert mode on halt and brings the normal mode for actions like undo(u) etc
18. General Tips
	a) yyp, duplicates a line
	b) ddp, swap the below line to above line
	c) xp, swap then next character with current character
	d) 7p, pastes/puts 7 times
	e) use marks instead of visual selection
	f) Y == yy, copy entire line
	g) D == d$, delete till end of line
	h) C == c$, change till end of line
	i) !!date, to put date in current line
	j) !!ls, to put the list of file in current line
	k) !10Gsort, to input 10 lines and replace them with sorted output
	l) :vi new-file, exit current file and opens new-file
	m) :vi! new-file, close current file without saving and opens new-file
	n) :view new-file, exit current file and open new-file in read-only mode
	o) :set autowrite, automatically saves the file when ever a change is made
	o) :set noautowrite, opposite to auto write
19. Multiple Files
	a) vim a.txt b.txt c.txt, opens 3 files and land you one first file
	b) :next, moves you to next file
	c) :wnext, writes/saves current file and moves to next file
	d) :next!, to move to next file without saving the current one
	e) :2next or :2 next, to move to 2nd file
	f) :args, shows the list of files being opened, current file appears with [] brackets
	g) :previous or :Next, takes you to previous file
	h) :wprevious or :wNext, write the current file and takes you to previous file
	i) :first or :rewind, takes you to the first file
	j) :last, takes you to the last file
	k) cntl+^, switch the files when parallelly editing 2 text files; will get error if only one file is edited
20. BASH opearations, to move the cursor in insert mode, need to add from LFY magazine
	
	
	
	
TEST:
====
1. add commas in the end of each line(simillarly add comments too)

--text.txt
hi
hello
how
are
you

--new-text.txt
hi,
hello,
how,
are,
you,

Ans: A + , + ESC
	 then '.' dot to repeat it
	 
	For adding comments: I + -- + ESC
						 then '.' dot to repeat it
						 
	For removing comments: 0 + dW
							then '.' dot to repeat it
							
2. covert text to new-text

text.txt:
--------
hi,
hello,
how,
are,
you,

new-text.txt:
------------
, hi
, hello
, how
, are
, you

Ans: 1) add commas in the front: I + , + space + ESC : then dot to repeat
	 2) delete commas in the end: A + backspace + ESC : then dot to repeat


	 
Intermediate Vim -> https://www.youtube.com/watch?v=v0W7JkzQAzA
00:03 -> welcome
01:44 -> subject
02:24 -> topics not covered
03:38 -> what is vim?
04:28 -> composability
05:54 -> uncommon motions
11:55 -> more uncommon motions
12:17 -> anti-patterns, avoid them before making habit
16:02 -> fixing some common annoyances
17:25 -> copy and paste commands
21:02 -> common registers
23:14 -> important registers
26:04 -> read-only registers
29:12 -> macros
31:34 -> multiple files
33:28 -> buffers
35:21 -> using buffers
35:24 -> windows
37:07 -> tabs
37:52 -> syntax completion
39:25 -> program completion
41:47 -> other completions
42:52 -> digraphs or special characters
44:50 -> templates
45:56 -> snippets
47:06 -> plugins and manager
49:04 -> useful plugins
52:04 -> navigation
57:20 -> using vim to test
1:01:10 -> other cool commands
1:02:44 -> further resources

issue with delete key
ESC from INSERT, moves the CURSOR to one space LEFT
how to identify tabs and paragraphs
what are !,registers,plugins,folds,scripts,syntax_files,text-objects,marks,dotfiles,plugin-manager,macros,tab?
what are buffers,windows,snippets,cntl+x,leaderkey,spell-check,vimdiff,auto-spell-check?
zoom-in and zoom-out
color column, guideline to limit the line
programming the editor, vimscript, our own functions
edit compressed zip files
.viminfo file maintains your history, what you did to it, all movements
task-> change tail commas to leading commas without arrow keys
$ vimtutor
people call exclamation char (!) as BANG on the linux front
how to see edit log for a particular file in VIM? edits happend noted in a file.
what are ctags?
how to get help?
vim plugins: (as mentioned in mastering vim) leader key
	summary, commentary, replace with register,title case, sort-motion, system-copy
	custom text objects: indent, entire, line, ruby block
cntl+z, is it aborting vim process, and exiting vim?

HelpFul Resources:

Interactive:
===========
http://www.openvim.com/			-- good online tutorial
http://vim-adventures.com/quiz/	-- free vim test
http://www.vimgenius.com/lessons/vim-intro			-- free vim quiz
http://vim-adventures.com/	-- an amazing game asks you to learn many things, first 3 levels free

WEB:
===
http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/
http://stackoverflow.com/questions/7579213/is-there-an-interactive-way-to-learn-vim
http://vimhelp.appspot.com/vim_faq.txt.html
http://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim

VIDEOS:
======
https://www.youtube.com/user/sopier/videos		-- good vim/bash/emacs tutorials
https://www.youtube.com/watch?v=wlR5gYd6um0		-- mastering vim, great talk
https://www.youtube.com/watch?v=v0W7JkzQAzA		-- intermediate vim


https://www.youtube.com/user/visuellegedanken/playlists		-- 12 how to vids
read the comments, they are adding a lot of value to VIM in blogs and websites


CHEAT SHEET:
===========
http://www.worldtimzone.com/res/vi.html			-- cheat sheet
http://tnerual.eriogerg.free.fr/vimqrc.html		-- big cheat sheet
http://www.viemu.com/vi-vim-cheat-sheet.gif		-- this is important cheat sheet
http://naleid.com/blog/2010/10/04/vim-movement-shortcuts-wallpaper/		--good one

VIM Distribution = vimrc + vimplugins:
=====================================
https://github.com/tpope/vim-sensible
https://github.com/spf13/spf13-vim

COLORSCHEME:
===========
https://github.com/flazz/vim-colorschemes

LINKS from mastering vim by thoughtbot:
=======================================
https://medium.com/@mkozlows/why-atom-cant-replace-vim-433852f4b4d1#.8xknq76vn	-- composability
http://blog.carbonfive.com/2011/10/17/vim-text-objects-the-definitive-guide/
http://benmccormick.org/2014/07/02/learning-vim-in-2014-vim-as-language/
http://benmccormick.org/learning-vim-in-2014/		-- index of vim posts, good one
http://www.moolenaar.net/habits.html		-- bram moolenar 7 habits
http://usevim.com/2013/02/20/configuration/
https://github.com/kana/vim-textobj-user/wiki
https://github.com/tpope/vim-surround
http://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim	-- grok vi

VIMRC:
======
https://code.tutsplus.com/articles/top-10-pitfalls-when-switching-to-vim--net-18113

found excellen linux quiz here:
http://teaching.idallen.com/cst8207/14w/notes/week04notes.html#midterm-test-1

Resources:
01. Quizlet
02. Android App
03. StackOverFlow
04. Quora
05. VimCasts
06. YouTube
07. Other VIMRC
08. 
09.
10.

99 -> tips + 1 -> plugin

VIM - Bram Moolenaar, 1991
VI  - Bill Joy, 1976 

R not supported in game
1-Vim-Quiz:Cheat Sheet 123 strokes
1. cursor is in 11th line
2. 0, to move to begining of the line
3. 4k, to move to 7th line
4. 4dd, to delete 4 lines (current line + next 3 lines)
5. 5j, to move to 12th line
6. 3dd, to delete 3 lines (current line + next 2 lines)
7. d3w, to delete 3 words
8. k, to move up
9. 4w, to move to 4th word
10. d$, to delete the line till the end
11. G, to go to last line
12. o, to insert a line below it
13. 2k, to move 2 lines up
14. 4w, to move to 4th word
15. d$, to delete till the end
16. A, to append at the end of the line
17. /1s, to locate the words
18. x, to delete the character
19. i, to insert
20. n, to move to the next search
21. x, to delete the character
22. i, to insert
23. 15k, to move 15 lines up
24. de, to delete the word (dunno why dw not working)
25. 3j, to move 3 lines down
26. A, to append at the end of the line
27. 0, to go to begining of the line
28. /z, to search for z
29. r, to replace
30. n, to find next

2-Vim-Quiz:Cheat Sheet 106 strokes
1. cursor is in 11th line
2. 0, to move to begining of the line
3. 4k, to move to 7th line
4. 4dd, to delete 4 lines (current line + next 3 lines)
5. 5j, to move to 12th line
6. 3dd, to delete 3 lines (current line + next 2 lines)
7. d3w, to delete 3 words
8. k, to move up
9. 4w, to move to 4th word
10. d$, to delete the line till the end			-- 19 keystrokes
11. 7k, to move 7 lines above
12. 0, to move to begining
13. i, to insert
14. A, to append in end of line
15. gg, to move to beinging of file
16. 5w, to move 5 words (but why 5? whynot 4)
17. ce, to change the word
18. /z, to search for z
19. r, replace
20. n, next found word							-- 63 keystrokes
21. /1s, to search 1s
22. x, to delete
23. i, to insert
24. k, to move one line down
25. 2w, to move 2 words
26. c$, to change till end of line				-- 96 keystrokes
27. j, to move down one line
28. o, to insert a line below

3-Vim-Quiz:Cheat Sheet 96 strokes
1. gg, go to first line
2. 5w, moves 5 words
3. cw, deletes the word + insert mode
4. crazy, type crazy
5. *ESC*, escape			-- 12
6. /z + *ENTER*, to find z
7. rs, to replace with s
8. n, to find next z (rs n rs n rs)		-- 26
9. 0, begining of line
10. i, insert mode
11. in , type 'in '
12. A, to append
13. ones, type ' ones'		-- 39
14. 3j, move 3 line down
15. 4dd, delete 4 lines 			-- 44
16. 4j
17. 4w
18. d$		-- 50
19. j
20. 3dd
21. d3w
22. /1s
23. enter
24. s
25. one
26. n
27. s
28. one
29. j
30. 2w
31. c$
32. they can
33. j
34. o
35. who do.				-- 96

4-vim: 89 keystrokes
gg
5w
cw
'crazy'
<ESP>
/z
<ENTER>
rs
n
.
n
.
n
.
0
i
'in '
A
' ones'
3j
4dd
4j
4w
d$
j
3dd
d3w
/1s
<ENTER>
s
'one'
<ESP>
n
.
j
2w
c$
'they can'
j
o
'who do.'		--89

5-VIM:
gg
5w
cw
crazy
<ESC>
/z
<ENT>
rs
n.
n.
n.
3j
4dd		--41
/A
<ENT>
d$
j
3dd
d3w		--53
/1
s
one
n.
j2w
c$
they can
<ESC>
j
o
who do.
<ESC>	--87

6-VIM:
H		-- change
5w
cw
crazy
<ESC>
/z
<ENT>
rs
n.
n.
n.
A
' ones'
<ESC>
I		-- change
'in '
<ESC>
3j
4dd		--40
/A
<ENT>
d2as		--47 -- change, further "d2)"
/1
s
one
n.
j2w
C
they can
<ESC>
j
o
who do.
<ESC>	--79
